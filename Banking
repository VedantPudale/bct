// SPDX-License-Identifier: MIT
pragma solidity > 0.7.0;
contract bank{
    mapping (address=>uint) public user_account;
    mapping (address=>bool) public user_exist;
    
    function create_account() public payable returns (string memory){
        require(user_exist[msg.sender]==false,"Account exists");
        // user_account[msg.sender]=msg.value;
        // user_exist[msg.sender]=true;
        return "Account created";

    }
    function deposit(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender]==true,"Account does not exist");
        require(amount>0,"Amount should be greater than zero");
        user_account[msg.sender]+=amount;
        return "Amount deoposited";
    }
    function withdraw(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender]==true,"Account does not");
        require(amount>0,"Amount more than 0");
        require(user_account[msg.sender]>=amount,"Insufficient balance");
        user_account[msg.sender]-=amount;
        return "Amount withdrawn";
    }
    function account_balance() public view returns(uint){
        return user_account[msg.sender];
    }
    function account_exist() public  view returns(bool){
        return user_exist[msg.sender];
    }
}
