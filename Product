//  Write a smart contract on a test network, for product inventory including following operations:
// 1) Receive Product 2) Sale product 3) Display Stock

Code-

//SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.23;

import "hardhat/console.sol";

contract ProductInventory {

    struct Product {
        uint256 id;
        string name;
        uint256 price;
        uint256 stock;
    }

    mapping(uint256 => Product) public products;
    uint256 public nextProductId;

    event ProductReceived(uint256 id, string name, uint256 price, uint256 stock);
    event ProductSold(uint256 id, string name, uint256 price, uint256 stock);

    function receiveProduct(string memory name, uint256 price, uint256 stock) public {
        Product memory product = Product({
            id: nextProductId++,
            name: name,
            price: price,
            stock: stock
        });

        products[product.id] = product;

        emit ProductReceived(product.id, product.name, product.price, product.stock);
    }

    function sellProduct(uint256 id, uint256 quantity) public {
        require(products[id].stock >= quantity, "Insufficient stock");

        Product storage product = products[id];
        product.stock -= quantity;

        emit ProductSold(product.id, product.name, product.price, product.stock);
    }

    function displayStock() public view {
        for (uint256 id = 0; id < nextProductId; id++) {
            Product memory product = products[id];
            console.log("Product ID:", product.id);
            console.log("Product Name:", product.name);
            console.log("Product Price:", product.price);
            console.log("Product Stock:", product.stock);
        }
    }
}
